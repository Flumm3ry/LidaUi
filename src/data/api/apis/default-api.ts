/* tslint:disable */
/* eslint-disable */
/**
 * lida-api
 * This is a REST API utilising the CQRS design pattern being exposed via Google Clouds serverless functions.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
import { CreateSensorDataCommandDto } from '../models'
import { CreateSystemLogCommandDto } from '../models'
import { GetSensorDataQueryDto } from '../models'
import { GetSystemLogQueryDto } from '../models'
import { UpdateStateCommand } from '../models'
import { UpdateStateCommandDto } from '../models'
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSensorData: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/SensorData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSystemLog: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/SystemLog`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSensorData: async (
      startDate: number,
      endDate: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'startDate' is not null or undefined
      if (startDate === null || startDate === undefined) {
        throw new RequiredError(
          'startDate',
          'Required parameter startDate was null or undefined when calling readSensorData.'
        )
      }
      // verify required parameter 'endDate' is not null or undefined
      if (endDate === null || endDate === undefined) {
        throw new RequiredError(
          'endDate',
          'Required parameter endDate was null or undefined when calling readSensorData.'
        )
      }
      const localVarPath = `/SensorData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate
      }

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSystemLog: async (
      startDate: number,
      endDate: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'startDate' is not null or undefined
      if (startDate === null || startDate === undefined) {
        throw new RequiredError(
          'startDate',
          'Required parameter startDate was null or undefined when calling readSystemLog.'
        )
      }
      // verify required parameter 'endDate' is not null or undefined
      if (endDate === null || endDate === undefined) {
        throw new RequiredError(
          'endDate',
          'Required parameter endDate was null or undefined when calling readSystemLog.'
        )
      }
      const localVarPath = `/SystemLog`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate
      }

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UpdateStateCommand} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateState: async (body: UpdateStateCommand, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateState.'
        )
      }
      const localVarPath = `/State`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com')
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      const query = new URLSearchParams(localVarUrlObj.search)
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key])
      }
      for (const key in options.query) {
        query.set(key, options.query[key])
      }
      localVarUrlObj.search = new URLSearchParams(query).toString()
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSensorData(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSensorDataCommandDto>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createSensorData(
        options
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSystemLog(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSystemLogCommandDto>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createSystemLog(
        options
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readSensorData(
      startDate: number,
      endDate: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSensorDataQueryDto>>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).readSensorData(
        startDate,
        endDate,
        options
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readSystemLog(
      startDate: number,
      endDate: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSystemLogQueryDto>>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).readSystemLog(
        startDate,
        endDate,
        options
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {UpdateStateCommand} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateState(
      body: UpdateStateCommand,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateStateCommandDto>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateState(
        body,
        options
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSensorData(options?: any): AxiosPromise<CreateSensorDataCommandDto> {
      return DefaultApiFp(configuration)
        .createSensorData(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSystemLog(options?: any): AxiosPromise<CreateSystemLogCommandDto> {
      return DefaultApiFp(configuration)
        .createSystemLog(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSensorData(
      startDate: number,
      endDate: number,
      options?: any
    ): AxiosPromise<Array<GetSensorDataQueryDto>> {
      return DefaultApiFp(configuration)
        .readSensorData(startDate, endDate, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSystemLog(
      startDate: number,
      endDate: number,
      options?: any
    ): AxiosPromise<Array<GetSystemLogQueryDto>> {
      return DefaultApiFp(configuration)
        .readSystemLog(startDate, endDate, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UpdateStateCommand} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateState(body: UpdateStateCommand, options?: any): AxiosPromise<UpdateStateCommandDto> {
      return DefaultApiFp(configuration)
        .updateState(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createSensorData(options?: any) {
    return DefaultApiFp(this.configuration)
      .createSensorData(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createSystemLog(options?: any) {
    return DefaultApiFp(this.configuration)
      .createSystemLog(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @param {number} startDate
   * @param {number} endDate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public readSensorData(startDate: number, endDate: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .readSensorData(startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @param {number} startDate
   * @param {number} endDate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public readSystemLog(startDate: number, endDate: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .readSystemLog(startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @param {UpdateStateCommand} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateState(body: UpdateStateCommand, options?: any) {
    return DefaultApiFp(this.configuration)
      .updateState(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
